import chess

"""Piece-square tables (PSQTs) for evaluation."""
# table[i][j] is the bonus for the piece when it is on square[i][j].
# It is a tuple of (middlegame, endgame) values.

# Pawn
PAWN_PSQT = [
    [(0, 0) for _ in range(8)],
    [(2, -8), (4, -6), (11, 9), (18, 5), (16, 16), (21, 6), (9, -6), (-3, -18)],
    [(-9, -9), (-15, -7), (11, -10), (15, 5), (31, 2), (23, 3), (6, -8), (-20, -5)],
    [(-3, 7), (-20, 1), (8, -8), (19, -2), (39, -14), (17, -13), (2, -11), (-5, -6)],
    [(11, 12), (-4, 6), (-11, 2), (2, -6), (11, -5), (0, -4), (-12, 14), (5, 9)],
    [(3, 27), (-11, 18), (-6, 19), (22, 29), (-8, 30), (-5, 9), (-14, 8), (-11, 14)],
    [(-7, -1), (6, -14), (-2, 13), (-11, 22), (4, 24), (-14, 17), (10, 7), (-9, 7)],
    [(0, 0) for _ in range(8)]
]

# Knight
KNIGHT_PSQT = [
    [(-175, -96), (-92, -65), (-74, -49), (-73, -21), (-73, -21), (-74, -49), (-92, -65), (-175, -96)],
    [(-77, -67), (-41, -54), (-27, -18), (-15, 8), (-15, 8), (-27, -18), (-41, -54), (-77, -67)],
    [(-61, -40), (-17, -27), (6, -8), (12, 29), (12, 29), (6, -8), (-17, -27), (-61, -40)],
    [(-35, -35), (8, -2), (40, 13), (49, 28), (49, 28), (40, 13), (8, -2), (-35, -35)],
    [(-34, -45), (13, -16), (44, 9), (51, 39), (51, 39), (44, 9), (13, -16), (-34, -45)],
    [(-9, -51), (22, -44), (58, -16), (53, 17), (53, 17), (58, -16), (22, -44), (-9, -51)],
    [(-67, -69), (-27, -50), (4, -51), (37, 12), (37, 12), (4, -51), (-27, -50), (-67, -69)],
    [(-201, -100), (-83, -88), (-56, -56), (-26, -17), (-26, -17), (-56, -56), (-83, -88), (-201, -100)]
]

# Bishop
BISHOP_PSQT = [
    [(-37, -40), (-4, -21), (-6, -26), (-16, -8), (-16, -8), (-6, -26), (-4, -21), (-37, -40)],
    [(-11, -26), (6, -9), (13, -12), (3, 1), (3, 1), (13, -12), (6, -9), (-11, -26)],
    [(-5, -11), (15, -1), (-4, -1), (12, 7), (12, 7), (-4, -1), (15, -1), (-5, -11)],
    [(-4, -14), (8, -4), (18, 0), (27, 12), (27, 12), (18, 0), (8, -4), (-4, -14)],
    [(-8, -12), (20, -1), (15, -10), (22, 11), (22, 11), (15, -10), (20, -1), (-8, -12)],
    [(-11, -21), (4, 4), (1, 3), (8, 4), (8, 4), (1, 3), (4, 4), (-11, -21)],
    [(-12, -22), (-10, -14), (4, -1), (0, 1), (0, 1), (4, -1), (-10, -14), (-12, -22)],
    [(-34, -32), (1, -29), (-10, -26), (-16, -17), (-16, -17), (-10, -26), (1, -29), (-34, -32)]
]

# Rook
ROOK_PSQT = [
    [(-31, -9), (-20, -13), (-14, -10), (-5, -9), (-5, -9), (-14, -10), (-20, -13), (-31, -9)],
    [(-21, -12), (-13, -9), (-8, -1), (6, -2), (6, -2), (-8, -1), (-13, -9), (-21, -12)],
    [(-25, 6), (-11, -8), (-1, -2), (3, -6), (3, -6), (-1, -2), (-11, -8), (-25, 6)],
    [(-13, -6), (-5, 1), (-4, -9), (-6, 7), (-6, 7), (-4, -9), (-5, 1), (-13, -6)],
    [(-27, -5), (-15, 8), (-4, 7), (3, -6), (3, -6), (-4, 7), (-15, 8), (-27, -5)],
    [(-22, 6), (-2, 1), (6, -7), (12, 10), (12, 10), (6, -7), (-2, 1), (-22, 6)],
    [(-2, 4), (12, 5), (16, 20), (18, -5), (18, -5), (16, 20), (12, 5), (-2, 4)],
    [(-17, 18), (-19, 0), (-1, 19), (9, 13), (9, 13), (-1, 19), (-19, 0), (-17, 18)]
]

# Queen
QUEEN_PSQT = [
    [(3, -69), (-5, -57), (-5, -47), (4, -26), (4, -26), (-5, -47), (-5, -57), (3, -69)],
    [(-3, -54), (5, -31), (8, -22), (12, -4), (12, -4), (8, -22), (5, -31), (-3, -54)],
    [(-3, -39), (6, -18), (13, -9), (7, 3), (7, 3), (13, -9), (6, -18), (-3, -39)],
    [(4, -23), (5, -3), (9, 13), (8, 24), (8, 24), (9, 13), (5, -3), (4, -23)],
    [(0, -29), (14, -6), (12, 9), (5, 21), (5, 21), (12, 9), (14, -6), (0, -29)],
    [(-4, -38), (10, -18), (6, -11), (8, 1), (8, 1), (6, -11), (10, -18), (-4, -38)],
    [(-5, -50), (6, -27), (10, -24), (8, -8), (8, -8), (10, -24), (6, -27), (-5, -50)],
    [(-2, -74), (-2, -52), (1, -43), (-2, -34), (-2, -34), (1, -43), (-2, -52), (-2, -74)]
]

# King
KING_PSQT = [
    [(271, 1), (327, 45), (271, 85), (198, 76), (198, 76), (271, 85), (327, 45), (271, 1)],
    [(278, 53), (303, 100), (234, 133), (179, 135), (179, 135), (234, 133), (303, 100), (278, 53)],
    [(195, 88), (258, 130), (169, 169), (120, 175), (120, 175), (169, 169), (258, 130), (195, 88)],
    [(164, 103), (190, 156), (138, 172), (98, 172), (98, 172), (138, 172), (190, 156), (164, 103)],
    [(154, 96), (179, 166), (105, 199), (70, 199), (70, 199), (105, 199), (179, 166), (154, 96)],
    [(123, 92), (145, 172), (81, 184), (31, 191), (31, 191), (81, 184), (145, 172), (123, 92)],
    [(88, 47), (120, 121), (65, 116), (33, 131), (33, 131), (65, 116), (120, 121), (88, 47)],
    [(59, 11), (89, 59), (45, 73), (-1, 78), (-1, 78), (45, 73), (89, 59), (59, 11)]
]

PHASES = [0, 0, 1, 1, 2, 4, 0]  # piece indices start at 0


def psqt_square_score(pieceType: chess.PieceType, color: chess.Color, square: chess.Square, eg=False) -> int:
    i = 1 if eg else 0
    x = chess.square_rank(square)
    y = chess.square_file(square)
    
    if color == chess.BLACK:
        x = 7 - x
    
    if pieceType == chess.PAWN:
        return PAWN_PSQT[x][y][i]
    elif pieceType == chess.KNIGHT:
        return KNIGHT_PSQT[x][y][i]
    elif pieceType == chess.BISHOP:
        return BISHOP_PSQT[x][y][i]
    elif pieceType == chess.ROOK:
        return ROOK_PSQT[x][y][i]
    elif pieceType == chess.QUEEN:
        return QUEEN_PSQT[x][y][i]
    elif pieceType == chess.KING:
        return KING_PSQT[x][y][i]
    else:
        return 0


def psqt_score_color(pos: chess.Board, color: chess.Color, eg=False) -> int:
    score = 0
    for pieceType in chess.PIECE_TYPES:
        for square in pos.pieces(pieceType, color):
            score += psqt_square_score(pieceType, color, square, eg)
    return score